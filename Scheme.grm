(* Scheme grammar *)

open Sexp

fun dottedPair xs last =
    let
	fun aux [x] = CONSsexp (x, last)
	  | aux (x::xs) = CONSsexp (x, aux xs)
    in
	aux xs
    end

fun abbrevPrefix s e =
    CONSsexp (SYMsexp s, CONSsexp (e, NILsexp))

%%

%eop EOF

%pos int

%term EOF
  | DOT
  | LPAREN
  | LVEC
  | RPAREN
  | QUOTESCHEME
  | QUASIQUOTE
  | UNQUOTE
  | UNQUOTESPLICING
  | INT of int
  | CHAR of char
  | BOOL of bool
  | STRING of string
  | ID of string

%nonterm START of sexp
  | EXP of sexp
  | EXPSTAR of sexp
  | EXPLIST of sexp list

%name Scheme

%prefer RPAREN
%keyword DOT LPAREN LVEC RPAREN
%keyword QUOTESCHEME QUASIQUOTE UNQUOTE UNQUOTESPLICING
%keyword BOOL

%noshift EOF
%value ID ("*bogus*")
%verbose

%%

(* Read just one S-expression *)
START : EXP (EXP)

EXP : INT (INTsexp INT)
    | CHAR (CHARsexp CHAR)
    | BOOL (BOOLsexp BOOL)
    | STRING (STRINGsexp STRING)
    | ID (SYMsexp ID)
    | LPAREN EXPSTAR RPAREN (EXPSTAR)
    | LPAREN EXP EXPLIST DOT EXP RPAREN (dottedPair (EXP1::EXPLIST) EXP2)
    | LVEC EXPLIST RPAREN (VECsexp (Vector.fromList EXPLIST))
    | QUOTESCHEME EXP (abbrevPrefix "quote" EXP)
    | QUASIQUOTE EXP (abbrevPrefix "quasiquote" EXP)
    | UNQUOTE EXP (abbrevPrefix "unquote" EXP)
    | UNQUOTESPLICING EXP (abbrevPrefix "unquote-splicing" EXP)

EXPSTAR : (* empty *) (NILsexp)
    | EXP EXPSTAR (CONSsexp (EXP, EXPSTAR))

EXPLIST : (* empty *) ([])
    | EXP EXPLIST (EXP::EXPLIST)
